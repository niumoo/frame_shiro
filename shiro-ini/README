#INI 配置
##根对象 SecurityManager
从之前的 Shiro 架构图可以看出， Shiro 是从根对象 SecurityManager 进行身份验证和授权的；
也就是所有操作都是自 它开始的， 这个对象是线程安全且真个应用只需要一个即可， 因此
Shiro 提供了 SecurityUtils 让我们绑定它为全局的，方便后续操作。
因为 Shiro 的类都是 POJO 的， 因此都很容易放到任何 IoC 容器管理。 但是和一般的 IoC 容
器的区别在于， Shiro 从根对象 securityManager 开始导航； Shiro 支持的依赖注入： public
空参构造器对象的创建、 setter 依赖注入。
-----------
即使没接触过 IoC 容器的知识， 如上配置也是很容易理解的：
1、 对象名=全限定类名 相对于调用 public 无参构造器创建对象
2、 对象名 .属性名 =值  相当于调用 setter 方法设置常量值
3、 对象名 .属性名 =$对象引用  相当于调用 setter 方法设置对象引用

##注意事项
1 、 默 认 情 况 先 创 建 一 个 名 字 为 securityManager ， 类 型 为
org.apache.shiro.mgt.DefaultSecurityManager 的默认的 SecurityManager， 如果想自定义， 只
需要在 ini 配置文件中指定“ securityManager=SecurityManager 实现类” 即可， 名字必须为
securityManager， 它是起始的根。  
2、 IniSecurityManagerFactory 是创建 securityManager 的工厂， 其需要一个 ini 配置文件路径，
其支持“ classpath:” （类路径） 、 “ file:” （文件系统） 、 “url:” （网络） 三种路径格式，
默认是文件系统。  
3、 接着获取 SecuriyManager 实例， 后续步骤和之前的一样。

##INI 配置
ini 配置文件类似于 Java 中的 properties（ key=value） ， 不过提供了将 key/value 分类的特性，
key 是每个部分不重复即可， 而不是整个配置文件。 如下是 INI 配置分类：

```
Factory<org.apache.shiro.mgt.SecurityManager> factory =
  new IniSecurityManagerFactory("classpath:shiro-config.ini");  
org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();  
//将 SecurityManager 设置到 SecurityUtils 方便全局使用  
SecurityUtils.setSecurityManager(securityManager);  
Subject subject = SecurityUtils.getSubject();  
UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");  
subject.login(token);  
Assert.assertTrue(subject.isAuthenticated());  
```

###[main]部分
提供了对根对象 securityManager 及其依赖对象的配置。
创建对象
其构造器必须是 public 空参构造器， 通过反射创建相应的实例。
常量值 setter 注入
会自 动调用 jdbcRealm.setPermissionsLookupEnabled(true)，对于这种常量值会自 动类型转
换。
对象引用 setter 注入
```
###[main]
> 提供了对根对象 securityManager 及其依赖的配置

securityManager=org.apache.shiro.mgt.DefaultSecurityManager  
…………
securityManager.realms=$jdbcRealm  
###[users]
> 提供了对用户 /密码及其角色的配置， 用户名=密码， 角色 1， 角色 2

username=password,role1,role2  
###[roles]
> 提供了角色及权限之间关系的配置， 角色=权限 1， 权限 2

role1=permission1,permission2
###[urls]
> 用于 web， 提供了对 web url 拦截相关的配置， url=拦截器[参数]， 拦截器

/index.html = anon  
/admin/** = authc, roles[admin], perms["permission1"]  
securityManager=org.apache.shiro.mgt.DefaultSecurityManager  
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator  
authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy  
authenticator.authenticationStrategy=$authenticationStrategy  
securityManager.authenticator=$authenticator  
dataSource.driverClassName=com.mysql.jdbc.Driver  
jdbcRealm.permissionsLookupEnabled=true  
```


会自 动通过 securityManager.setAuthenticator(authenticator)注入引用依赖。
嵌套属性 setter 注入
也支持这种嵌套方式的 setter 注入。
byte 数组 setter 注入
默认需要使用 Base64 进行编码， 也可以使用 0x 十六进制。
Array/Set/List setter 注入
多个之间通过“， ” 分割。
Map setter 注入
即格式是： map=key： value， key： value， 可以注入常量及引用值， 常量的话都看作字符串
（即使有泛型也不会自 动造型） 。
实例化/注入顺序
后边的覆盖前边的注入。
测试用例请参考配置文件 shiro-config-main.ini。
```
securityManager.authenticator.authenticationStrategy=$authenticationStrategy  
> base64 byte[]  

authenticator.bytes=aGVsbG8=  
> hex byte[]  

authenticator.bytes=0x68656c6c6f  
authenticator.array=1,2,3  
authenticator.set=$jdbcRealm,$jdbcRealm  
authenticator.map=$jdbcRealm:$jdbcRealm,1:1,key:abc  
authenticator.bytes=aGVsbG8=  
authenticator.bytes=0x68656c6c6f  
realm=Realm1  
realm=Realm12  
```

###[users]部分
配置用户名 /密码及其角色， 格式： “用户名=密码， 角色 1， 角色 2” ， 角色部分可省略。
如：
```
###[users]
zhang=123,role1,role2  
wang=123  
```
密码一般生成其摘要/加密存储
###[roles]部分
配置角色及权限之间的关系， 格式： “角色=权限 1， 权限 2” ； 如：
```
roles]  
role1=user:create,user:update  
role2=*  
```
如果只有角色没有对应的权限， 可以不配 roles。
###[urls]部分
配置 url 及相应的拦截器之间的关系， 格式： “url=拦截器[参数]， 拦截器[参数]， 如：
```
具
体规则参见 web 相关章节。
###[users]
zhang=123,role1,role2  
wang=123  
[roles]  
role1=user:create,user:update  
role2=*  
###[urls]
/admin/** = authc, roles[admin], perms["permission1"]  
```
